// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PaymentStatus {
  PENDING
  PAID
  HOLD
}

model Patient {
  id          String        @id @default(cuid())
  firstName   String
  lastName    String
  email       String?       @unique
  payments    Payment[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  PaymentPlan PaymentPlan[]
  Application Application[]
}

model Payment {
  id            String        @id @default(cuid())
  patientId     String
  patient       Patient       @relation(fields: [patientId], references: [id], onDelete: Cascade)
  dueDate       DateTime
  paidAt        DateTime?
  amountCents   Int
  lateFeeCents  Int           @default(0)
  status        PaymentStatus @default(PENDING)
  methodLabel   String?
  holdReason    String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  paymentPlanId String
  paymentPlan   PaymentPlan   @relation(fields: [paymentPlanId], references: [id], onDelete: Cascade)

  @@index([dueDate, status])
}

enum PlanHealth {
  EXCELLENT
  GOOD
  FAIR
  POOR
}

// Self-financed or Kayya-backed
enum PlanType {
  SELF
  KAYYA
}

// Loan application statuses:
// SENT: Payment plan sent to borrower (waiting for user to apply)
// FAILED: Payment plan not approved (auto or owner-rejected)
// PENDING: Payment plan approved (waiting for user to pay/signup)
// PAID: Payment plan paid + user signed up (waiting to schedule appointment)
// CONTACTED: Followup from small business
// DONE: Scheduled appointment
enum ApplicationStatus {
  SENT
  FAILED
  PENDING
  PAID
  CONTACTED
  DONE
}

model PaymentPlan {
  id               String       @id @default(cuid())
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  patientId        String
  patient          Patient      @relation(fields: [patientId], references: [id], onDelete: Cascade)
  principalCents   Int
  downPaymentCents Int          @default(0)
  termMonths       Int          @default(12)
  startDate        DateTime     @default(now())
  billingDay       Int          @default(15)
  aprBps           Int          @default(0)
  health           PlanHealth
  planType         PlanType     @default(SELF)
  payments         Payment[]
  onHold           Boolean      @default(false)
  Application      Application?
}

model Application {
  id            String            @id @default(cuid())
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  submittedAt   DateTime          @default(now())
  patientId     String
  patient       Patient           @relation(fields: [patientId], references: [id], onDelete: Cascade)
  paymentPlanId String?           @unique
  paymentPlan   PaymentPlan?      @relation(fields: [paymentPlanId], references: [id])
  amountCents   Int
  planType      PlanType
  creditScore   Int?
  completionPct Int?              @default(0)
  status        ApplicationStatus @default(SENT)

  @@index([submittedAt, status, planType])
}

model BusinessProfile {
  id               Int      @id
  name             String?
  address          String?
  hours            String?
  website          String?
  services         Json?    // string[]
  financingOptions Json?    // string[]
  testimonials     Json?    // [{ author: string, quote: string }]
  updatedAt        DateTime @updatedAt
}
